#!/bin/bash
#pimpupdate - Created by sling00  irc.freenode.net #pimp
#Report issues/submit fixes to: https://github.com/sling00/pimpupdate
#Thanks to # FWishbringer 04/12/13 for the bulk of the download function that gives the sexy fluid progress bars ;).
#No warranty whatsoever expressed or implied, if this breaks your couch in half and launches you with an airbag, its not my fault. 
#If you use printed copys to burn down your house, also not my fault, lose data. not my fault. lose time...not my fault. 
#However if you like it.
#VARIABLES DON'T TOUCH UNLESS YOU KNOW WHAT YOU ARE GOING TO BREAK!
SCRIPT_VERSION=1.0.7
PIMP_VERSION=`sed -n '2,2p' /etc/version`
CURL2='/usr/bin/curl'
PMUPDATEVERURL="http://hackin.yourshell.net/pimpupdate/version"
CURLARGS="-f -s -S -k"
PMURL="https://github.com/starlilyth/Linux-PoolManager/archive/master.zip"
SMURL="https://github.com/starlilyth/Linux-SeedManager/archive/master.zip"

SCRIPT_NEW_VERSION="$($CURL2 $CURLARGS $PMUPDATEVERURL)"
THELINE='echo -====================================================================-'
DEV=0
exec > >(tee /opt/pimp/pimpupdatefiles/logs/pimpupdate.log)
#Wget progress filter 
if [ $DEV != 0 ];
then
	PMUPDATEVERURL="http://hackin.yourshell.net/pimpupdate/dev-version"
else
	PMUPDATEVERURL="http://hackin.yourshell.net/pimpupdate/version"
fi

#DOWNLOADFUNCTION
function download() {
local URL=$
local destin=$1
#local CLEANURL=`echo $URL | sed -r 's#.*\/([^.]+).*#\1#'`
local CLEANURL=`echo $URL | sed -r 's#.*\/([^/]+).*#\1#'`
echo "Downloading $CLEANURL"
wget -O $destin  "$URL" 2>&1 | awk -v bsc=`tput cub1` '/[.] +[0-9]{2}?[0-9]?%/ {
percentage = substr($0,63,3)
byfour = percentage / 4
printf "["
for (i=1; i<=25; i++)
{
  if (i <= byfour)
     printf "="
  else
     printf " "
}
printf "] %3d%%",percentage
for (i=1; i<= 32; i++) {printf bsc}
}
END {printf "[=========================] 100%%\n"}'
}
function doinstall.version() {
#if grep -wqs pimp /etc/version ; then
#	if [[ sed -n '2,2p' /etc/version ]]; then
	$THELINE
	echo "Pimp $PIMP_VERSION detected Continuing installation"
	case $PIMP_VERSION in
	 	1.0 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
		    download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.0.tbz2
			doinstall.pimp
			;;
		1.1 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.1.tbz2
			doinstall.pimp
			;;
		1.2 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.2.tbz2
			doinstall.pimp
			;;
		1.3.1 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.3.1.tbz2
			doinstall.pimp
			;;
		1.3.7h )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.3.7h.tbz2
			doinstall.pimp
			;;
		1.3.7t )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.3.7t.tbz2
			doinstall.pimp
			;;
		1.4-amd-12.8 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.4-amd-12.8.tbz2
			doinstall.pimp
			;;
		1.4-amd-13.12 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.4-amd-13.12.tbz2
			doinstall.pimp
			;;
		1.4-amd-14.4 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.4-amd-14.4.tbz2
			doinstall.pimp
			;;
		9.9.9 )
			echo DEV VERSION DETECTED
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.dev.tbz2
			doinstall.pimp
			;;
	esac	
#	else echo "Unable to find pimp version sorry"
#	exit 1
#fi
}
#Seedmanager Installation function
function doinstall.seedmanager() {
echo "Gathering files for PiMP $PIMP_VERSION....."
download /tmp/seedmanager.zip $SMURL
cd /opt/pimp/
echo "moving old /opt/pimp/sminstall install directory....."
sleep 2
rm -rf /opt/pimp/sminstall.pimpdist 2> /dev/null
mv /opt/pimp/sminstall /opt/pimp/sminstall.pimpdist
echo "Extracting new seed manager.... Everyone thank LILY!!!!"
sleep 2
unzip -q /tmp/seedmanager.zip -d /opt/pimp/sminstall
#git clone https://github.com/starlilyth/Linux-PoolManager.git /opt/pimp/pminstall
echo "Installing new seedmanager"
sleep 2
cd /opt/pimp/sminstall/Linux-SeedManager-master/
 ./install-sm.pl -q
echo "Setting permissions on seedmanager.conf just incase these are wrong.."
chown www-data.root /opt/ifmi/seedmanager.conf
echo "Successfully installed updated seedmanager"
$THELINE
rm /tmp/seedmanager.zip
}

#Installer function-Pimp
function doinstall.pimp() {
cd /opt/pimp/
echo "moving old /opt/pimp/pminstall install directory....."
sleep 2
rm -rf /opt/pimp/pminstall.pimpdist 2> /dev/null
mv /opt/pimp/pminstall /opt/pimp/pminstall.pimpdist
echo "Extracting new pool manager.... Everyone thank LILY!!!!"
sleep 2
unzip -q /tmp/poolmanager.zip -d /opt/pimp/pminstall
#git clone https://github.com/starlilyth/Linux-PoolManager.git /opt/pimp/pminstall
echo "Installing new poolmanager"
sleep 2
cd /opt/pimp/pminstall/Linux-PoolManager-master/
 ./install-pm.pl -q
echo "Setting permissions on poolmanager.conf just incase these are wrong.."
chown www-data.root /opt/ifmi/poolmanager.conf
echo "Successfully installed updated poolmanager"
rm /tmp/poolmanager.zip
$THELINE
}
#This will be used later.
function checkupdates() {
	# incomplete 
	echo this should never display.
}
#these two should be moved to the installer.
function f.pimpupdateskel() {
	if [ ! -e /opt/pimp/pimpupdatefiles ]
		then
		echo "Unable to locate /opt/pimp/pimpupdatefiles creating directory structure"
		mkdir /opt/pimp/pimpupdatefiles
		mkdir /opt/pimp/pimpupdatefiles/backups/
		mkdir /opt/pimp/pimpupdatefiles/logs/
	else 
		echo "Looks like this has been installed before, continuing..."
fi
}
#function f.backupfolder(){
#	if [ ! -e /opt/pimp/pimpupdatefiles/backups ]
#}
function doinstall.wicdfix() {
	#wireless_interface = wlan0 
	#sed -i -e 's/wireless_interface = None/wireless_interface = wlan0/g' /etc/wicd/manager-settings.conf
	case $PIMP_VERSION in
	 	1.3.1 )
			echo "Applying fix on Pimp $PIMP_VERSION....."
			echo "Backing up /etc/wicd/manager-settings.conf to /opt/pimp/pimpupdatefiles/backups/"
			cp /etc/wicd/manager-settings.conf /opt/pimp/pimpupdatefiles/backups/
			echo "Applying wifi fix...."
			sed -i -e 's/wireless_interface = None/wireless_interface = wlan0/g' /etc/wicd/manager-settings.conf
			echo "If your wifi adapter is supported you should now see wireless networks in wicd."
			;;
		1.3.7h )
			echo "Applying fix on Pimp $PIMP_VERSION....."
			echo "Backing up /etc/wicd/manager-settings.conf to /opt/pimp/pimpupdatefiles/backups/"
			cp /etc/wicd/manager-settings.conf /opt/pimp/pimpupdatefiles/backups/
			echo "Applying wifi fix...."
			sed -i -e 's/wireless_interface = None/wireless_interface = wlan0/g' /etc/wicd/manager-settings.conf
			echo "If your wifi adapter is supported you should now see wireless networks in wicd."
			;;
		1.3.7t )
			echo "Applying fix on Pimp $PIMP_VERSION....."
			echo "Backing up /etc/wicd/manager-settings.conf to /opt/pimp/pimpupdatefiles/backups/"
			cp /etc/wicd/manager-settings.conf /opt/pimp/pimpupdatefiles/backups/
			echo "Applying wifi fix...."
			sed -i -e 's/wireless_interface = None/wireless_interface = wlan0/g' /etc/wicd/manager-settings.conf
			echo "If your wifi adapter is supported you should now see wireless networks in wicd."
			;;
		1.4-amd-12.8 )
			Echo "Applying fix on Pimp $PIMP_VERSION....."
			echo "Backing up /etc/wicd/manager-settings.conf to /opt/pimp/pimpupdatefiles/backups/"
			cp /etc/wicd/manager-settings.conf /opt/pimp/pimpupdatefiles/backups/
			echo "Applying wifi fix...."
			sed -i -e 's/wireless_interface = None/wireless_interface = wlan0/g' /etc/wicd/manager-settings.conf
			echo "If your wifi adapter is supported you should now see wireless networks in wicd."
			;;
		1.4-amd-13.12 )
			echo "Applying fix on Pimp $PIMP_VERSION....."
			echo "Backing up /etc/wicd/manager-settings.conf to /opt/pimp/pimpupdatefiles/backups/"
			cp /etc/wicd/manager-settings.conf /opt/pimp/pimpupdatefiles/backups/
			echo "Applying wifi fix...."
			sed -i -e 's/wireless_interface = None/wireless_interface = wlan0/g' /etc/wicd/manager-settings.conf
			echo "If your wifi adapter is supported you should now see wireless networks in wicd."
			;;
		9.9.9 )
			echo DEV VERSION DETECTED
			echo "Gathering files for PiMP $PIMP_VERSION....."
			;;	
	* ) 
	echo "This fix is not applicable to $PIMP_VERSION"
esac
}
function doinstall.smprofiles() {
echo "Update seedmanager.conf with the latest Seedmanager profile?"
echo "Note this will reset your email notification settings"
echo "Install updated profile? Y/N:"
	read SMPROFILES
	if [ $SMPROFILES == y ]; then
		/opt/ifmi/smcontrol stop 2>/dev/null
		echo "Downloading latest seedmanager.conf"
		download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/smupdate/seedmanager.conf.tbz2

	    echo "Backing up old seedmanager.conf to /opt/ifmi/seedmanager.conf.bak"
	    if [[ -e /opt/ifmi/seedmanager.conf ]]; then
	    	mv /opt/ifmi/seedmanager.conf /opt/ifmi/seedmanager.conf.bak
	    	tar jxvf /tmp/seedmanager.conf.tbz2 -C /opt/ifmi/ > /tmp/pmprofile.log
	    	chown www-data.root /opt/ifmi/seedmanager.conf
	    	sleep 2
	    else echo "No seedmanager.conf found to back up...Continuing..."
		fi
		echo "Updated Seedmanager profile installed...Enjoy!"
		echo "Remember to reconfigure your email alert settings after using this feature"
		rm /tmp/seedmanager.conf.tbz2
		echo "Restarting mining..... (May take 30-45 seconds!)"
		/opt/ifmi/smcontrol start
		echo "Done..."
		echo "Script completed! Please report bugs to Sling00 in #PIMP irc.freenode.net"
		exit 0
	else echo "Script completed! Please report bugs to Sling00 in #PIMP irc.freenode.net"
exit 0
fi
}
#PM Profiles
function pmprofiles() {
echo "Update poolmanager.conf with latest miner profiles (DOES NOT REPLACE YOUR CGMINER.CONF FILES)"
echo "Note this will reset your active mining profile to scrypt, as well as remove any email notification settings"
echo "Install updated profiles? Y/N:"
	read PMPROFILES
	if [ $PMPROFILES == y ]; then
		f.minestop
	    echo "Backing up old poolmanager.conf to /opt/ifmi/poolmanager.conf.bak"
	    if [[ -e /opt/ifmi/poolmanager.conf ]]; then
	    	mv /opt/ifmi/poolmanager.conf /opt/ifmi/poolmanager.conf.bak
	    	tar jxvf /tmp/poolmanager.conf.tbz2 -C /opt/ifmi/ > /tmp/pmprofile.log
	    	chown www-data.root /opt/ifmi/poolmanager.conf
	    	sleep 2
	    else echo "No poolmanager.conf found to back up...Continuing..."
		fi
		echo "PiMP Updated default algorithm profiles installed...Enjoy!"
		echo "Remember to reconfigure your email alert settings after using this feature"
		rm /tmp/poolmanager.conf.tbz2
		f.minestart
		echo "Done..."
		echo "Script completed! Please report bugs to Sling00 in #PIMP irc.freenode.net"
		exit 0
	else echo "Script completed! Please report bugs to Sling00 in #PIMP irc.freenode.net"
exit 0
fi
}
function f.minestart() {
	echo "Restarting mining..... (May take 30-45 seconds!)"
	/etc/init.d/mine start
}
# Mine stop function
function f.minestop() {
echo "Stopping mining....."
/etc/init.d/mine stop
}
#Nodm installation function
function doinstall.nodm() {
$THELINE
echo "Updating Premine scripts to latest version..."
echo "Downloading latest nodm.tar from patch site..."
download /tmp/nodm.tar http://hackin.yourshell.net/nodm/nodm.tar
echo "Backing up old /etc/init.d/nodm to /root/nodm.bak"
cp /etc/init.d/nodm /root/nodm.bak
echo "Extracting new /etc/init.d/nodm....."
tar xvf /tmp/nodm.tar -C /etc/init.d/
chmod +x /etc/init.d/nodm
(update-rc.d nodm remove)
(update-rc.d nodm defaults)
}
function doinstall.sgminer() {
		$THELINE
	echo "Checking sgminer version...."
		local SGMINERVER=`/opt/sgminer/sgminer --version` 
		echo $SGMINERVER "detected.."
		if [ `/opt/sgminer/sgminer --version | grep -c 4.1.271-4-g3d71` = 1 ];
		then
		$THELINE 
		echo "Your sgminer version is 4.1.271-4-g3d71, this version needs to be rolled back to 4.1.242"
		echo "Due to an sgminer bug adding erroneous commas in the config file upon api save."
		echo "Note, the old sgminer version will be saved in /opt/sgminer-4.1.271"
		echo "Continue? y/n: "
		read SGMINER_CONTINUE
		if [ $SGMINER_CONTINUE = y ];
			then  
			f.minestop
			
			download /tmp/sgminer-4.1.242.tbz2 http://hackin.yourshell.net/pimpupdate/fixes/sgminer-4.1.242.tbz2
			echo "Backing up old sgminer to /opt/sgminer-4.1.272"
			mv /opt/sgminer /opt/sgminer-4.1.271
			echo "Extracting new sgminer to /opt/sgminer"
			tar jxvpf /tmp/sgminer-4.1.242.tbz2 -C /opt/
			echo "Finished"
			f.minestart
		else
			echo "Going back to the main menu..." 
			pimpmenu
		fi
	else echo "Your version of sgminer does not need to be changed."
		$THELINE
		pimpmenu
	fi
}
#SGMINER ROLLBACK TO FIX BAD CONF ON POOL ADD
function doinstall.check.sgminer() {
	clear
	$THELINE
	case $PIMP_VERSION in 
		1.4-amd-12.8 )
		doinstall.sgminer
		;;
		1.4-amd-13.12 )
		doinstall.sgminer
		;;
		1.4-amd-14.4 )
		doinstall.sgminer
		;;
		* )
		echo "Your version of PiMP does not need this fix applied."
		pimpmenu
		;;
	esac
	echo "wee"
	$THELINE
}
#BFGMINER Gridseed fix.
function doinstall.bfgminer() {
	clear
	$THELINE
	echo "wee"
	$THELINE
}
#Manualstart manual miner starting menu system.
function doinstall.manualstart() {
	clear
	$THELINE
	echo "notes"
	$THELINE
}
#Menu function
function pimpmenu() {
$THELINE
local PMSELECT_1="1. Update Poolmanager"
local PMSELECT_2="2. Install updated poolmanager profiles"
local PMSELECT_3="3. Update Seedmanager"
local PMSELECT_4="4. Install updated seedmanager profiles"
local PMSELECT_5="5. Install nodm update"
local PMSELECT_6="6. install wicd wifi fix."
local PMSELECT_7="7. Install Pimp 1.4 SGMINER rollback fix"
local PMSELECT_8="8. Install BFGMINER fix for gridseeds"
local PMSELECT_9="9. Install manualstart command line miner starting tool."
echo "What would you like to do?"
echo $PMSELECT_1
echo $PMSELECT_2 
echo $PMSELECT_3
echo $PMSELECT_4
echo $PMSELECT_5
echo $PMSELECT_6
echo $PMSELECT_7
echo $PMSELECT_8
echo $PMSELECT_9
echo "or q to exit"
echo -n "Which one? 1-6: "
	read PMSELECTNUM
	if [ $PMSELECTNUM == q ];
		then exit 0
	else
	echo -n "You selected $PMSELECT_$PMSELECTNUM Correct? Y/N: "
	read PMSELECT_CONTINUE
	if [ $PMSELECT_CONTINUE == y ];
	then 
	case $PMSELECTNUM in
		1 )
		doinstall.version
		;;
		2 )
		doinstall.pmprofiles
		;;
		3 )
		doinstall.seedmanager
		;;
		4 )
		doinstall.smprofiles
		;;
		5 )
		doinstall.nodm
		;;
		6 )
		doinstall.wicdfix
		;;
		7 )
		doinstall.sgminer
		;;
		8 )
		doinstall.bfgminer
		;;
		9 )
		doinstall.manualstart
		;;
	esac
	else
	$THELINE
	echo "Invalid Selection,"
	echo "Returning to menu"
	pimpmenu
	exit 1 
fi
fi
}
#Work begins below#
if [ "$UID" -ne 0 ]
  then echo "ERROR: Please run as root"
  else
f.pimpupdateskel  
clear
$THELINE
echo -e '\E[00;34m'"\033[1mPiMPUpdate Version $SCRIPT_VERSION\033[0m"
echo -e '\E[00;31m'"\033[1mScript by Sling00\033[0m"
$THELINE
echo -e '\E[00;31m'"\033[1mNOTE: Installation on BAMT or OTHER OS IS EXPERIMENTAL!\033[0m"
echo -n "Do you wish to continue Enter y/n: "
	read PMPUPDATE_CONTINUE
	if [ $PMPUPDATE_CONTINUE == y ]; then
		echo "Getting latest version of pimpupdate"
#Is pimpupdate up to date?! Updater code below...		
	echo "Checking if Pimpupdate is up to date........"
	if [ $SCRIPT_NEW_VERSION \> $SCRIPT_VERSION ];
	then
	echo -n "pmupdate script is out of date! Would you like it to update itself? y/n: "
	read PMPUPDATE_UPDATE
	if [ $PMPUPDATE_UPDATE == y ]; then
		echo "Getting latest version of updatepm"
		download /tmp/pimpupdate.tar http://hackin.yourshell.net/pimpupdate/pimpupdate.tar
		tar xvf /tmp/pimpupdate.tar -C /opt/pimp/ > /tmp/pmupdate.log
		echo "Update completed. Please rerun this script to continue."
		rm /tmp/pimpupdate.tar
		exit 0
	else
	echo "not updating...Continue at your own risk....."
	$THELINE
fi
	else 
	echo "Script up to date! Commencing..."
	$THELINE
	pimpmenu
	fi
#Work begins below
else
	echo "Error: Not updating because the user didn't answer y when prompted."
	exit 1
fi
fi
