#!/bin/bash
#pimpupdate - Created by sling00  irc.freenode.net #pimp
#Report issues/submit fixes to: https://github.com/sling00/pimpupdate
#No warranty whatsoever expressed or implied, if this breaks your couch in half and then launches you with an airbag, its not my fault. 
#If you use printed copys to burn down your house, also not my fault, lose data. not my fault. lose time...not my fault. 
#However if you like it.
#VARIABLES DON'T TOUCH UNLESS YOU KNOW WHAT YOU ARE GOING TO BREAK!
SCRIPT_VERSION=1.2.0
PIMP_VERSION=`sed -n '2,2p' /etc/version`
CURL2='/usr/bin/curl'
PMUPDATEVERURL="http://hackin.yourshell.net/pimpupdate/version"
CURLARGS="-f -s -S -k"
PMURL="https://github.com/starlilyth/Linux-PoolManager/archive/master.zip"
SMURL="https://github.com/starlilyth/Linux-SeedManager/archive/master.zip"
SCRIPT_NEW_VERSION="$($CURL2 $CURLARGS $PMUPDATEVERURL)"
THELINE='echo -====================================================================-'
DEV=0
#Turn on logging?
#exec > >(tee /opt/pimp/pimpupdatefiles/logs/pimpupdate.log)
#Are we working from git? 
if [ "$DEV" != 0 ];
then
	PMUPDATEVERURL="http://hackin.yourshell.net/pimpupdate/dev-version"
else
	PMUPDATEVERURL="http://hackin.yourshell.net/pimpupdate/version"
fi
if [ "$DEV" != 0 ];
	then
		source /root/pimpupdate/pimpupdate.minermenu
	else
		source /opt/pimp/pimpupdate.minermenu
fi
#DOWNLOADFUNCTION
function download() {
local URL=$2
local destin=$1
local CLEANURL=`echo $URL | sed -r 's#.*\/([^/]+).*#\1#'`
echo "Downloading $CLEANURL"
wget -O $destin  "$URL"
}
function f.return() { 
	echo "Returning to the main menu..."
	pimpmenu
}
function doinstall.version() {
#if grep -wqs pimp /etc/version ; then
#	if [[ sed -n '2,2p' /etc/version ]]; then
	$THELINE
	echo "Pimp $PIMP_VERSION detected Continuing installation"
	case $PIMP_VERSION in
	 	1.0 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
		    download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.0.tbz2
			doinstall.pimp
			;;
		1.1 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.1.tbz2
			doinstall.pimp
			;;
		1.2 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.2.tbz2
			doinstall.pimp
			;;
		1.3.1 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.3.1.tbz2
			doinstall.pimp
			;;
		1.3.7h )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.3.7h.tbz2
			doinstall.pimp
			;;
		1.3.7t )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.3.7t.tbz2
			doinstall.pimp
			;;
		1.4-amd-12.8 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.4-amd-12.8.tbz2
			doinstall.pimp
			;;
		1.4-amd-13.12 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.4-amd-13.12.tbz2
			doinstall.pimp
			;;
		1.4-amd-14.4 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.4-amd-14.4.tbz2
			doinstall.pimp
			;;
		1.4.1-amd-12.8 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.4.1-amd-12.8.tbz2
			doinstall.pimp
			;;
		1.4.1-amd-13.12 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.4.1-amd-13.12.tbz2
			doinstall.pimp
			;;
		1.4.1-amd-14.4 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.4.1-amd-14.4.tbz2
			doinstall.pimp
			;;
		1.4.2-amd-12.8 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.4.2-amd-12.8.tbz2
			doinstall.pimp
			;;
		1.4.2-amd-13.12 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.4.2-amd-13.12.tbz2
			doinstall.pimp
			;;
		1.4.2-amd-14.4 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.4.2-amd-14.4.tbz2
			doinstall.pimp
			;;
		1.5.2-amd-13.12 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.5.3-amd-13.12.tbz2
			doinstall.pimp
			;;
		1.5.3-amd-13.12 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.5.3-amd-13.12.tbz2
			doinstall.pimp
			;;
		1.6.0-amd-13.12 )
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.1.6.0-amd-13.12.tbz2
			doinstall.pimp
			;;	
		9.9.9 )
			echo DEV VERSION DETECTED
			echo "Gathering files for PiMP $PIMP_VERSION....."
			download /tmp/poolmanager.zip $PMURL
			download /tmp/poolmanager.conf.tbz2 http://hackin.yourshell.net/pmupdate/poolmanager.conf.dev.tbz2
			doinstall.pimp
			;;
	esac	
#	else echo "Unable to find pimp version sorry"
#	exit 1
#fi
}
#Seedmanager Installation function
function doinstall.seedmanager() {
	echo "Gathering files for PiMP $PIMP_VERSION....."
	download /tmp/seedmanager.zip $SMURL
	cd /opt/pimp/
	echo "moving old /opt/pimp/sminstall install directory....."
	sleep 2
	rm -rf /opt/pimp/sminstall.pimpdist 2> /dev/null
	mv /opt/pimp/sminstall /opt/pimp/sminstall.pimpdist
	echo "Extracting new seed manager.... Everyone thank LILY!!!!"
	sleep 2
	unzip -q /tmp/seedmanager.zip -d /opt/pimp/sminstall
#git clone https://github.com/starlilyth/Linux-PoolManager.git /opt/pimp/pminstall
	echo "Installing new seedmanager"
	sleep 2
	cd /opt/pimp/sminstall/Linux-SeedManager-master/
	 ./install-sm.pl -q
	echo "Setting permissions on seedmanager.conf just incase these are wrong.."
	chown www-data.root /opt/ifmi/seedmanager.conf
	echo "Successfully installed updated seedmanager"
$THELINE
rm /tmp/seedmanager.zip
f.return
}

#Installer function-Pimp
function doinstall.pimp() {
	cd /opt/pimp/
	echo "Moving old /opt/pimp/pminstall install directory....."
	sleep 2
	rm -rf /opt/pimp/pminstall.pimpdist 2> /dev/null
	mv /opt/pimp/pminstall /opt/pimp/pminstall.pimpdist
	echo "Extracting new pool manager.... Everyone thank LILY!!!!"
	sleep 2
	unzip -q /tmp/poolmanager.zip -d /opt/pimp/pminstall
#git clone https://github.com/starlilyth/Linux-PoolManager.git /opt/pimp/pminstall
	echo "Installing new poolmanager"
	sleep 2
	cd /opt/pimp/pminstall/Linux-PoolManager-master/
 	./install-pm.pl -q
	echo "Setting permissions on poolmanager.conf just incase these are wrong.."
	chown www-data.root /opt/ifmi/poolmanager.conf
	echo "Successfully installed updated poolmanager"
	rm /tmp/poolmanager.zip
	$THELINE
	f.return
}
#This will be used later.
function checkupdates() {
	# incomplete work in progress. 
	echo this should never display.
}

#these two should be moved to the installer.
function f.pimpupdateskel() {
	if [ ! -e /opt/pimp/pimpupdatefiles ]
		then
		echo "Unable to locate /opt/pimp/pimpupdatefiles creating directory structure"
		mkdir /opt/pimp/pimpupdatefiles
		mkdir /opt/pimp/pimpupdatefiles/backups/
		mkdir /opt/pimp/pimpupdatefiles/logs/
	else 
		echo "Looks like this has been installed before, continuing..."
fi
}
#function f.backupfolder(){
#	if [ ! -e /opt/pimp/pimpupdatefiles/backups ]
#}
function doinstall.wicdfix() {
	#wireless_interface = wlan0 
	#sed -i -e 's/wireless_interface = None/wireless_interface = wlan0/g' /etc/wicd/manager-settings.conf
	case $PIMP_VERSION in
	 	1.3.1 )
			echo "Applying fix on Pimp $PIMP_VERSION....."
			echo "Backing up /etc/wicd/manager-settings.conf to /opt/pimp/pimpupdatefiles/backups/"
			cp /etc/wicd/manager-settings.conf /opt/pimp/pimpupdatefiles/backups/
			echo "Applying wifi fix...."
			sed -i -e 's/wireless_interface = None/wireless_interface = wlan0/g' /etc/wicd/manager-settings.conf
			echo "If your wifi adapter is supported you should now see wireless networks in wicd."
			;;
		1.3.7h )
			echo "Applying fix on Pimp $PIMP_VERSION....."
			echo "Backing up /etc/wicd/manager-settings.conf to /opt/pimp/pimpupdatefiles/backups/"
			cp /etc/wicd/manager-settings.conf /opt/pimp/pimpupdatefiles/backups/
			echo "Applying wifi fix...."
			sed -i -e 's/wireless_interface = None/wireless_interface = wlan0/g' /etc/wicd/manager-settings.conf
			echo "If your wifi adapter is supported you should now see wireless networks in wicd."
			;;
		1.3.7t )
			echo "Applying fix on Pimp $PIMP_VERSION....."
			echo "Backing up /etc/wicd/manager-settings.conf to /opt/pimp/pimpupdatefiles/backups/"
			cp /etc/wicd/manager-settings.conf /opt/pimp/pimpupdatefiles/backups/
			echo "Applying wifi fix...."
			sed -i -e 's/wireless_interface = None/wireless_interface = wlan0/g' /etc/wicd/manager-settings.conf
			echo "If your wifi adapter is supported you should now see wireless networks in wicd."
			;;
		1.4-amd-12.8 )
			Echo "Applying fix on Pimp $PIMP_VERSION....."
			echo "Backing up /etc/wicd/manager-settings.conf to /opt/pimp/pimpupdatefiles/backups/"
			cp /etc/wicd/manager-settings.conf /opt/pimp/pimpupdatefiles/backups/
			echo "Applying wifi fix...."
			sed -i -e 's/wireless_interface = None/wireless_interface = wlan0/g' /etc/wicd/manager-settings.conf
			echo "If your wifi adapter is supported you should now see wireless networks in wicd."
			;;
		1.4-amd-13.12 )
			echo "Applying fix on Pimp $PIMP_VERSION....."
			echo "Backing up /etc/wicd/manager-settings.conf to /opt/pimp/pimpupdatefiles/backups/"
			cp /etc/wicd/manager-settings.conf /opt/pimp/pimpupdatefiles/backups/
			echo "Applying wifi fix...."
			sed -i -e 's/wireless_interface = None/wireless_interface = wlan0/g' /etc/wicd/manager-settings.conf
			echo "If your wifi adapter is supported you should now see wireless networks in wicd."
			;;
		9.9.9 )
			echo DEV VERSION DETECTED
			echo "Gathering files for PiMP $PIMP_VERSION....."
			;;	
	* ) 
	echo "This fix is not applicable to $PIMP_VERSION"
esac
}
#Seedmanager profiles
function doinstall.smprofiles() {
echo "Update seedmanager.conf with the latest Seedmanager profile?"
echo "Note this will reset your email notification settings"
echo -n "Install updated profile? Y/N:"
	read SMPROFILES
	if [ $SMPROFILES == y ]; then
		/opt/ifmi/smcontrol stop 2>/dev/null
		echo "Downloading latest seedmanager.conf"
		download /tmp/seedmanager.conf.tbz2 http://hackin.yourshell.net/smupdate/seedmanager.conf.tbz2

	    echo "Backing up old seedmanager.conf to /opt/ifmi/seedmanager.conf.bak"
	    if [[ -e /opt/ifmi/seedmanager.conf ]]; then
	    	mv /opt/ifmi/seedmanager.conf /opt/ifmi/seedmanager.conf.bak
	    	tar jxvf /tmp/seedmanager.conf.tbz2 -C /opt/ifmi/ > /tmp/pmprofile.log
	    	chown www-data.root /opt/ifmi/seedmanager.conf
	    	sleep 2
	    else 
	    	echo "No seedmanager.conf found to back up...Continuing..."
	    	tar jxvf /tmp/seedmanager.conf.tbz2 -C /opt/ifmi/ > /tmp/pmprofile.log
	    	chown www-data.root /opt/ifmi/seedmanager.conf
	    	sleep 2
		fi
		echo "Updated Seedmanager profile installed...Enjoy!"
		echo "Remember to reconfigure your email alert settings after using this feature"
		rm /tmp/seedmanager.conf.tbz2
		echo "Restarting mining..... (May take 30-45 seconds!)"
		/opt/ifmi/smcontrol start
		echo "Script completed! Please report bugs to Sling00 in #PIMP irc.freenode.net"
		sleep 5
		f.return
	else echo "Returning to menu, you didn't enter y to continue."
	pimpmenu
fi
}
#Poolmanager Profiles
function doinstall.pmprofiles() {
echo "Update poolmanager.conf with latest miner profiles (DOES NOT REPLACE YOUR CGMINER.CONF FILES)"
echo "Note this will reset your active mining profile to scrypt, as well as remove any email notification settings"
echo -n "Install updated profiles? Y/N:"
	read PMPROFILES
	if [ $PMPROFILES == y ]; then
		f.minestop
	    echo "Backing up old poolmanager.conf to /opt/ifmi/poolmanager.conf.bak"
	    if [[ -e /opt/ifmi/poolmanager.conf ]]; then
	    	mv /opt/ifmi/poolmanager.conf /opt/ifmi/poolmanager.conf.bak
	    	tar jxvf /tmp/poolmanager.conf.tbz2 -C /opt/ifmi/ > /tmp/pmprofile.log
	    	chown www-data.root /opt/ifmi/poolmanager.conf
	    	sleep 2
	    else echo "No poolmanager.conf found to back up...Continuing..."
		fi
		echo "Remember to reconfigure your email alert settings after using this feature"
		rm /tmp/poolmanager.conf.tbz2
		f.minestart
		echo "Done..."
		echo "Script completed! Please report bugs to Sling00 in #PIMP irc.freenode.net"
		f.return
	else 
	echo "Try again! you must enter y to continue."
	f.return
fi
}
function f.minestart() {
	echo "Restarting mining..... (May take 30-45 seconds!)"
	cd /opt/ifmi/
	/etc/init.d/mine start
}
# Mine stop function
function f.minestop() {
	echo "Stopping mining....."
	/etc/init.d/mine stop
}
#Nodm installation function
function doinstall.nodm() {
$THELINE
echo "Updating Premine scripts to latest version..."
echo "Downloading latest nodm.tar from patch site..."
download /tmp/nodm.tar http://hackin.yourshell.net/nodm/nodm.tar
echo "Backing up old /etc/init.d/nodm to /root/nodm.bak"
cp /etc/init.d/nodm /root/nodm.bak
echo "Extracting new /etc/init.d/nodm....."
tar xvf /tmp/nodm.tar -C /etc/init.d/
chmod +x /etc/init.d/nodm
(update-rc.d nodm remove)
(update-rc.d nodm defaults)
f.return
}
function doinstall.sgminer() {
		$THELINE
	echo "Checking sgminer version...."
		local SGFILE="http://hackin.yourshell.net/pimpupdate/1.4-sgminerfix/sgminer-4.1.242.tbz2"
		local SGMINERVER=`/opt/sgminer/sgminer --version` 
		echo $SGMINERVER "detected.."
			if [ `/opt/sgminer/sgminer --version | grep -c 4.1.271` = 1 ];
			then
			$THELINE 
			echo "Your sgminer version is 4.1.271.xxxx, this version needs to be rolled back to 4.1.242"
			echo "Due to an sgminer bug adding erroneous commas in the config file upon api save."
			echo "Note, the old sgminer version will be saved in /opt/sgminer-4.1.271"
			echo -n "Continue? y/n: "
			read SGMINER_CONTINUE
			if [ $SGMINER_CONTINUE = y ];
				then  
				f.minestop
				download /tmp/sgminer-4.1.242.tbz2 $SGFILE
				echo "Backing up old sgminer to /opt/sgminer-4.1.271"
				mv /opt/sgminer /opt/sgminer-4.1.271 
				echo "Extracting new sgminer to /opt/sgminer"
				tar jxvpf /tmp/sgminer-4.1.242.tbz2 -C /opt/
				echo "Finished"
				f.minestart
				f.return
				else
					f.return
				fi
			else echo "Your version of sgminer does not need to be changed."
			$THELINE
			f.return
	fi
}
#SGMINER ROLLBACK TO FIX BAD CONF ON POOL ADD
function checkinstall.sgminer() {
	clear
	$THELINE
	case $PIMP_VERSION in 
		1.4-amd-12.8 )
		doinstall.sgminer
		;;
		1.4-amd-13.12 )
		doinstall.sgminer
		;;
		1.4-amd-14.4 )
		doinstall.sgminer
		;;
		* )
		echo "Your version of PiMP does not need this fix applied."
		f.return
		;;
	esac
	echo "..."
	$THELINE
}
function checkinstall.x11mod() {
	clear
	$THELINE
	echo "Pimp 1.x open source sph-sgminer_x11mod installer"
	$THELINE
	if [ -e /opt/sph-sgminer_x11mod ];
		then
			echo -n "X11 mod miner already installed, reinstall? (y/n): "
			read X11_REINSTALL
			if [ $X11_REINSTALL = y ];
				then
				doinstall.x11mod
			else 
				pimpmenu
			fi
	else 
		doinstall.x11mod
	fi
	}
function doinstall.x11mod() {
	f.minestop
	$THELINE
	echo "This is an optimized miner for the X11 algorithm."
	echo "This is the open source version NOT the binary vesion"
	echo "This will also replace your current poolmanager.conf"
	echo "with one that has an x11 mod profile in it. "
	echo "YOU WILL HAVE TO RE-ENTER EMAIL NOTIFICATION SETTINGS AFTER THIS!"
	echo "AND ALSO ANY CUSTOM POOLMANAGER ALGORITHM PROFILES!"
	echo -n "Ok to continue? (y/n): "
	read X11_CONTINUE
	if [ $X11_CONTINUE = y ];
		then
			doinstall.x11mod1		
		else
			f.return
	fi
}
function doinstall.x11mod1() {
	download /tmp/sph-sgminer_x11mod.tbz2 http://hackin.yourshell.net/pimpupdate/1.x-x11mod/sph-sgminer_x11mod.tbz2
	download /tmp/cgminer.x11mod.tbz2 http://hackin.yourshell.net/pimpupdate/1.x-x11mod/cgminer.x11mod.tbz2
	echo "Extracting X11 mod miner to /opt/sph-sgminer_x11mod"
	tar jxvpf /tmp/sph-sgminer_x11mod.tbz2 -C /opt/
	echo "Done, extracting poolmanager.conf w/ jackpot & cgminer.jackpot.conf"
	tar jxvpf /tmp/cgminer.x11mod.tbz2 -C /opt/ifmi/
	chown www-data.root /opt/ifmi/poolmanager.conf
	echo "Finished"
	f.minestart
}
function checkinstall.jackpot() {
	clear
	$THELINE
	echo "Pimp 1.x Jackpot coin miner installer"
	$THELINE
	if [ -e /opt/sgminer-jackpot ];
		then
			echo -n "Jackpot coin miner already installed, reinstall? (y/n): "
			read J_REINSTALL
			if [ $J_REINSTALL = y ];
				then
				doinstall.jackpot
			else 
				pimpmenu
			fi
	else 
		doinstall.jackpot
	fi
	}
function doinstall.jackpot() {
	f.minestop
	$THELINE
	echo "This is a miner for the jackpotcoin algorithm."
	echo "This will also replace your current poolmanager.conf"
	echo "with one that has jackpotcoin in it. "
	echo "YOU WILL HAVE TO RE-ENTER EMAIL NOTIFACTION SETTINGS AFTER THIS!"
	echo -n "Ok to continue? (y/n): "
	read J_CONTINUE
	if [ $J_CONTINUE = y ];
		then
			doinstall.jackpot1			
		else
			f.return
	fi
}
function doinstall.jackpot1() {
	download /tmp/sgminer-jackpot.tbz2 http://hackin.yourshell.net/pimpupdate/1.x-jackpot/sgminer-jackpot.tbz2
	download /tmp/cgminer.jackpot.tbz2 http://hackin.yourshell.net/pimpupdate/1.x-jackpot/cgminer.jackpot.tbz2
	echo "Extracting jackpotcoin miner to /opt/sgminer-jackpot"
	tar jxvpf /tmp/sgminer-jackpot.tbz2 -C /opt/
	echo "Done, extracting poolmanager.conf w/ jackpot & cgminer.jackpot.conf"
	tar jxvpf /tmp/cgminer.jackpot.tbz2 -C /opt/ifmi/
	chown www-data.root /opt/ifmi/poolmanager.conf
	echo "Finished"
	f.minestart
}
function doinstall.lsockernels() {
	clear
	$THELINE
	echo "Pimp 1.4 installer for LSOC Scrypt/Scryptn Kernels"
	$THELINE
	echo "LSOC is an sgminer CL kernel by Soul_Keeper"
	echo "It improves performance on most 78xx / 270(x) cards."
	echo "You may need to increase your thread concurrency to see gains"
	echo "Activate by changing the \"kernel\" line in cgminer.conf to lsoc or lsoc3"
	echo "It works for Scrypt / Scrypt-n"
	echo -n "Ok to continue? y/n:" 
	read LSOC_CONTINUE
	if [ $LSOC_CONTINUE = y ]
		then
			$THELINE
			echo "Downloading lsoc kernel tarball.."
			download /tmp/lsoc.tbz2 http://hackin.yourshell.net/pimpupdate/1.x-lsoc/lsoc-5-6-2014.tbz2
			echo "Extracting lsoc kernels to /tmp..."
			tar jxpf /tmp/lsoc.tbz2 -C /tmp/
			if [ -e /opt/sgminer/kernel ];
				then
						echo "Sgminer kernel directory located at /opt/sgminer/kernel"
						echo "Copying lsoc.cl & lsoc3.cl to /opt/sgminer/kernel"
						cp /tmp/lsoc.cl /opt/sgminer/kernel/lsoc.cl
						cp /tmp/lsoc3.cl /opt/sgminer/kernel/lsoc3.cl
						echo "Installed Successfully"
						sleep 2

						f.return
			elif [ -e /opt/sgminer-4.1.0/kernel ];
				then
						echo "Sgminer kernel directory located at /opt/sgminer-4.1.0/kernel"
						echo "Copying lsoc.cl & lsoc3.cl to /opt/sgminer-4.1.0/kernel"
						cp /tmp/lsoc.cl /opt/sgminer-4.1.0/kernel/lsoc.cl
						cp /tmp/lsoc3.cl /opt/sgminer-4.1.0/kernel/lsoc3.cl
						f.return
			else 
						echo "Cannot determine your sgminer directory, returning to main menu"
						pimpmenu
			fi
		else
			echo "Returning to the main menu..."
			pimpmenu
	fi
}
function doinstall.arebypkernel() {
	clear
	$THELINE
	echo "Pimp installer for arebyp Scrypt miner Kernel"
	$THELINE
	echo "arebyp is an sgminer CL kernel by arebyp"
	echo "It improves performance on most all cards for scrypt mining.."
	echo "You may need to increase your thread concurrency to see gains"
	echo "or modify your engine/memory clock"
	echo "Activate by changing the \"kernel\" line in cgminer.conf to arebyp"
	echo "It works for Scrypt only, no scrypt-n support at this time"
	echo -n "Ok to continue? y/n:" 
	read AB_CONTINUE
	if [ $AB_CONTINUE = y ]
		then
			$THELINE
			echo "Downloading arebyp kernel tarball.."
			download /tmp/arebyp.tbz2 http://hackin.yourshell.net/pimpupdate/1.x-arebyp/arebyp-5-25-14.tbz2
			echo "Extracting arebyp kernel to /tmp..."
			tar jxpf /tmp/arebyp.tbz2 -C /tmp/
			if [ -e /opt/sgminer/kernel ];
				then
						echo "Sgminer kernel directory located at /opt/sgminer/kernel"
						echo "Copying arebyp.cl to /opt/sgminer/kernel"
						cp /tmp/arebyp.cl /opt/sgminer/kernel/arebyp.cl
						echo "arebyp kernel Installed Successfully"
						sleep 2
						f.return
			elif [ -e /opt/sgminer-4.1.0/kernel ];
				then
						echo "Sgminer kernel directory located at /opt/sgminer-4.1.0/kernel"
						echo "Copying arebyp.cl to /opt/sgminer-4.1.0/kernel"
						cp /tmp/arebyp.cl /opt/sgminer-4.1.0/kernel/arebyp.cl
						sleep 2
						f.return
			else 
						echo "Cannot determine your sgminer directory, returning to main menu"
						pimpmenu
			fi
		else
			echo "Returning to the main menu..."
			pimpmenu
	fi
}
#BFGMINER Gridseed fix.
function doinstall.bfgminer() {
	clear
	$THELINE
	echo "Pimp 1.4 BFGMINER installer for gridseed ASIC support."
	$THELINE
	echo "Currently ONLY for 1.4, Full 1.x support coming soon."
	echo "This will replace the defunct bfgminer located in /opt/bfgminer"
	echo -n "Ok to continue? y/n:" 
	read BFG_CONTINUE
	if [ $BFG_CONTINUE = y ]
		then
			$THELINE
			echo "Removing old bfgminer...."
			rm -rf /opt/bfgminer
			echo "Downloading bfgminer binary tarball.."
			download /tmp/bfgminer-gridseed.tbz2 http://hackin.yourshell.net/pimpupdate/1.x-bfgminer/bfgminer-gridseed.tbz2
			echo "Extracting new bfgminer..."
			tar jxpf /tmp/bfgminer-gridseed.tbz2 -C /opt/
			echo "Done, remember to update seedmanager & profiles for a full working setup!"
			f.return
		else
			echo "You must enter y if you wish to continue...Returning to main menu"
			pimpmenu
	fi 
}
#Manualstart manual miner starting menu system.
function doinstall.manualstart() {
	clear
	$THELINE
	echo "Manualstart 1.0 installer for pimp."
	$THELINE
	echo "Currently ONLY for 1.3.1/1.4, Full 1.x support coming soon."
	echo "This will replace manualrun with manualstart. Multi algorithm support"
	echo "As well as being able to use your conf or the default for testing"
	echo "Does not replace your conf file!"
	echo "If manualstart is already installed, this will simple reinstall it."
	echo -n "Ok to continue? y/n:" 
	read MS_CONTINUE
	if [ $MS_CONTINUE = y ];
		then
			$THELINE
			echo "Moving /opt/pimp/manualrun to /opt/pimp/manualrun.bak..."
			mv /opt/pimp/manualrun /opt/pimp/manualrun.bak
			echo "Downloading Manualstart tarball.."
			download /tmp/manualstart.tar.gz https://github.com/sling00/manualstart/archive/1.0.tar.gz
			echo "Extracting manualstart"
			tar zxvpf /tmp/manualstart.tar.gz -C /tmp
			echo "Moving manualstart to /opt/pimp..."
			mv /tmp/manualstart-1.0/manualstart /opt/pimp/
			mv /tmp/manualstart-1.0/manualstart.conf /opt/pimp
			ln -s /opt/pimp/manualstart /opt/pimp/manualrun
			echo "Done, remember stop mining before using this!"
		    echo "Returning to the main menu..."
		    f.return
		else
			f.return
	fi 
}
#Menu function for pimp 1.5.2+/1.6.0+
function pimpmenu16() {
local PMSELECT_1="1. Update Poolmanager"
local PMSELECT_2="2. Install updated poolmanager profiles"
local PMSELECT_3="3. Update Seedmanager"
local PMSELECT_4="4. Install updated seedmanager profiles"
local PMSELECT_5="5. Update miners using minermenu"
echo "What would you like to do?"
echo $PMSELECT_1
echo $PMSELECT_2 
echo $PMSELECT_3
echo $PMSELECT_4
echo $PMSELECT_5
echo $PMSELECT_6

echo "or q to exit"
echo -n "Which one? 1-6: "
	read PMSELECTNUM
	if [ $PMSELECTNUM == q ];
		then exit 0
	else
	echo -n "You selected $PMSELECT_$PMSELECTNUM Correct? Y/N: "
	read PMSELECT_CONTINUE
	if [ $PMSELECT_CONTINUE == y ];
	then 
	case $PMSELECTNUM in
		1 )
		doinstall.version
		;;
		2 )
		doinstall.pmprofiles
		;;
		3 )
		doinstall.seedmanager
		;;
		4 )
		doinstall.smprofiles
		;;
		5 ) 
		clear
		f.minermenu
		;;
		6 ) 
		checkinstall.x11mod
		;;
	esac
	else
	$THELINE
	echo "Invalid Selection,"
	echo "Returning to menu"
	pimpmenu
fi
fi
}
#Menu function for pimp 1.4.1/1.5-test/1.5.2-test
function pimpmenu141() {
local PMSELECT_1="1. Update Poolmanager"
local PMSELECT_2="2. Install updated poolmanager profiles"
local PMSELECT_3="3. Update Seedmanager"
local PMSELECT_4="4. Install updated seedmanager profiles"
local PMSELECT_5="5. Update miners using minermenu"
local PMSELECT_6="6. Install open source x11 optimized miner"
local PMSELECT_7="7. Install arebyp scrypt sgminer kernel"
echo "What would you like to do?"
echo $PMSELECT_1
echo $PMSELECT_2 
echo $PMSELECT_3
echo $PMSELECT_4
echo $PMSELECT_5
echo $PMSELECT_6
echo $PMSELECT_7
echo "or q to exit"
echo -n "Which one? 1-7: "
	read PMSELECTNUM
	if [ $PMSELECTNUM == q ];
		then exit 0
	else
	echo -n "You selected $PMSELECT_$PMSELECTNUM Correct? Y/N: "
	read PMSELECT_CONTINUE
	if [ $PMSELECT_CONTINUE == y ];
	then 
	case $PMSELECTNUM in
		1 )
		doinstall.version
		;;
		2 )
		doinstall.pmprofiles
		;;
		3 )
		doinstall.seedmanager
		;;
		4 )
		doinstall.smprofiles
		;;
		5 ) 
		clear
		f.minermenu
		;;
		6 ) 
		checkinstall.x11mod
		;;
		7 )
		doinstall.arebypkernel
		;;
	esac
	else
	$THELINE
	echo "Invalid Selection,"
	echo "Returning to menu"
	pimpmenu
fi
fi
}
#Menu function for pimp 1.4 & below 
function pimpmenu14() {
local PMSELECT_1="1. Update Poolmanager"
local PMSELECT_2="2. Install updated poolmanager profiles"
local PMSELECT_3="3. Update Seedmanager"
local PMSELECT_4="4. Install updated seedmanager profiles"
local PMSELECT_5="5. Update miners using minermenu"
local PMSELECT_6="6. Install LSOC Kernel for R7850 /R9 270"
local PMSELECT_7="7. install wicd wifi fix."
local PMSELECT_8="8. Install Pimp 1.4 SGMINER rollback fix"
local PMSELECT_9="9. Install BFGMINER fix for gridseeds"
local PMSELECT_10="10. Install manualstart command line miner starting tool."
local PMSELECT_11="11. Install nodm update"
local PMSELECT_12="12. Install jackpotcoin miner"
local PMSELECT_13="13. Install open source x11 optimized miner"
local PMSELECT_14="Install arebyp optimized scrypt sgminer kernel"
echo "What would you like to do?"
echo $PMSELECT_1
echo $PMSELECT_2 
echo $PMSELECT_3
echo $PMSELECT_4
echo $PMSELECT_5
echo $PMSELECT_6
echo $PMSELECT_7
echo $PMSELECT_8
echo $PMSELECT_9
echo $PMSELECT_10
echo $PMSELECT_11
echo $PMSELECT_12
echo $PMSELECT_13
echo $PMSELECT_14

echo "or q to exit"
echo -n "Which one? 1-14: "
	read PMSELECTNUM
	if [ $PMSELECTNUM == q ];
		then exit 0
	else
	echo -n "You selected $PMSELECT_$PMSELECTNUM Correct? Y/N: "
	read PMSELECT_CONTINUE
	if [ $PMSELECT_CONTINUE == y ];
	then 
	case $PMSELECTNUM in
		1 )
		doinstall.version
		;;
		2 )
		doinstall.pmprofiles
		;;
		3 )
		doinstall.seedmanager
		;;
		4 )
		doinstall.smprofiles
		;;
		5 ) 
		clear
		f.minermenu
		;;
		6 )
		doinstall.lsockernels
		;;
		7 )
		doinstall.wicdfix
		;;
		8 )
		checkinstall.sgminer
		;;
		9 )
		doinstall.bfgminer
		;;
		10 )
		doinstall.manualstart
		;;
		11 )
		doinstall.nodm
		;;
		12 )
		checkinstall.jackpot
		;;
		13 ) 
		checkinstall.x11mod
		;;
		14 )
		doinstall.arebypkernel
		;;
	esac
	else
	$THELINE
	echo "Invalid Selection,"
	echo "Returning to menu"
	pimpmenu
fi
fi
}

function pimpmenu() {
PIMP_VERSION2=`echo $PIMPVERSION | grep -o '1.4.1'`
	   if [[ `sed -n '2,2p' /etc/version  | grep -c 1.4.1-amd` = 1 ]];
		then
    		pimpmenu141
    	elif [[ `sed -n '2,2p' /etc/version  | grep -c 1.4.2-amd` = 1 ]];
    	then
    		pimpmenu141
    	elif [[ `sed -n '2,2p' /etc/version  | grep -c 1.5.2-amd` = 1 ]];
    	then
    		pimpmenu141
    	elif [[ `sed -n '2,2p' /etc/version  | grep -c 1.5.3-amd` = 1 ]];
    	then
    		pimpmenu16
    	elif [[ `sed -n '2,2p' /etc/version  | grep -c 1.6.0-amd` = 1 ]];
    	then
    		pimpmenu16
    	else
			pimpmenu14
	fi
}
#Work begins below#
if [ "$UID" -ne 0 ]
  then echo "ERROR: Please run as root"
  else
f.pimpupdateskel  
clear
$THELINE
echo -e '\E[00;34m'"\033[1mPiMPUpdate Version $SCRIPT_VERSION\033[0m"
echo -e '\E[00;31m'"\033[1mScript by Sling00\033[0m"
$THELINE
echo -n "Do you wish to continue Enter y/n: "
	read PMPUPDATE_CONTINUE
	if [ $PMPUPDATE_CONTINUE == y ]; then
		$THELINE
		echo "Getting latest version of pimpupdate"
	#Is pimpupdate up to date?! Updater code below...		
	echo "Checking if Pimpupdate is up to date........"
	if [ $SCRIPT_NEW_VERSION \> $SCRIPT_VERSION ];
	then
	echo -n "pimpupdate script is out of date! Would you like it to update itself? y/n: "
	read PMPUPDATE_UPDATE
	if [ $PMPUPDATE_UPDATE == y ]; then
		echo "Getting latest version of updatepm"
		download /tmp/pimpupdate.tar http://hackin.yourshell.net/pimpupdate/pimpupdate.tar
		tar xvf /tmp/pimpupdate.tar -C /opt/pimp/ > /tmp/pimpupdate.log
		echo "Update completed. Please rerun pimpupdate to continue."
		rm /tmp/pimpupdate.tar
		exit 0
	else
	echo "not updating...Continue at your own risk....."
	$THELINE
	pimpmenu
fi
	else 
	$THELINE
	echo "Script up to date! Commencing..."
	$THELINE
	pimpmenu
	fi
#Work begins below
else
	echo "Error: Stopping because the user didn't answer y when prompted."
	exit 1
fi
fi